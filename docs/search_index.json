[
["index.html", "EDAV Resource About this resource 0.1 Contact", " EDAV Resource Zach Bogart Joyce Robbins 2018-06-01 About this resource This resource is specifically tailored to the EDAV course offered at Columbia University. However, anyone interested in working with data in R will benefit from perusing these pages. 0.1 Contact Zach Bogart: Website / Twitter Joyce Robbins: Columbia Profile / Website / Twitter / Github "],
["intro.html", "1 Introduction 1.1 Everything you need for EDAV 1.2 Improving this resource 1.3 Fun Stuff: R Shirts", " 1 Introduction 1.1 Everything you need for EDAV This resource has everything you need and more to be successful with R, this EDAV course, and beyond. With this resource, we try to give you a curated collection of tools and references that will make it easier to learn how to work with data in R. We also believe it is important to learn by example, so there are several walkthroughs where we work with data and discuss problems as well as some tips/tricks that will help you. So, this resource provides a curated list of materials relevant to EDAV as well as examples that directly relate to the work you will be doing in this course. We hope this resource serves you well. 1.2 Improving this resource Not finding what you are looking for? Think a section could be made clearer? If you would like to improve this resource, consider submitting a pull request on the github page. 1.3 Fun Stuff: R Shirts I have made a few tshirts so you can show your love for R. Hope you enjoy. P.S. Designing a cool shirt or sticker is a great addition to your community contribution. It has to be cool, though :) Blue R Shirt Black Tidyverse R Shirt "],
["basics.html", "2 I NEED HELP 2.1 Getting Started 2.2 Getting More Specific 2.3 Help Me, R Community!", " 2 I NEED HELP So…there is soooo much to the world of R. Textbooks, cheatsheets, exercises, and other buzzwords full of resources you could go through. There are over 12585 packages on CRAN, the network through which R code and packages are distributed. It can be overwhelming. However, bear in mind that R is being used for a lot of different things, not all of which are relevant to EDAV. To help you navigate the landscape, here we provide a collection of resources that you should be familiar with in the context of this course. This is not to say that any of these resources are prerequisites, but they will come up in the course and we want to give you places to learn about them. Since people come with a variety of backgrounds, we will try to provide the essentials as well as some resources for more advanced users. Do not feel you have to go through all of these resources, but know that they are here if/when you need them. :) As always, if you would like to improve this resource, consider submitting a pull request on the github page. 2.1 Getting Started 2.1.1 Setting up R and RStudio It is super important to get up and running with R and RStudio as soon as you can. This video from DataCamp pretty much covers it. Know that you will be downloading two separate things: R, which is a programming language; and RStudio, which is an IDE (integrated development environment…fancy tool for working with R) that will make working with R a lot more enjoyable. 2.1.2 Use RStudio Like a Pro Great! RStudio is up and running on your computer! Now make sure you get comfy with what it can do. Don’t know your way around the RStudio IDE? I highly recommend this DataCamp course. Sections from Part 1 (Orientation, Programming, and Projects) are the most relevant for this course. They include videos about all the regions in RStudio, how to program efficiently/effectively in the IDE (gotta love those keyboard shortcuts), and the benefits of setting up R projects. A little hazy on that last sentence? The course will help. More Advanced: Another option is this RStudio webinar. Just want a quick reference to brush up with? Take a look at the RStudio Cheatsheets page. 2.1.3 Learning About R R is just like any language, programming or otherwise: you need to use it to get used to it. Just starting out in R? Check out this DataCamp course for a quick introduction. For this course, you can skim/mostly ignore matrices and lists (Parts 3 &amp; 6). More Advanced: Want to curl up with a good book about R? We recommend R for Data Science. It jumps right in, but is quite extensive. Focus less on Part IV (Model). 2.2 Getting More Specific 2.2.1 Tidyverse Don’t know what the tidyverse is? It’s great and we use it throughout this course. Specifically, ggplot2 and dplyr, two packages within the Tidyverse. What’s ggplot? Check out this DataCamp course. This course is split up into three parts and it is quite long, but it does go over pretty much everything ggplot has to offer. If you are starting out, stick with Part 1. What’s dplyr? Make friends with this DataCamp course. It goes through the main dplyr verbs: select, mutate, filter, arrange, summarise; as well as the lovely pipe operator. Advanced: Want case studies to go through? Try this one or this one. 2.2.2 Importing Data We often will need to pull data into RStudio to work with it. “Pull data”? I’m already confused. But wait! Here’s a DataCamp course on importing data using dplyr. Note: This course explains how to import every kind of data format under the sun…all you need to be familiar with for this course (mostly) is pulling in CSV files using read_csv. So, if you are overwhelmed, just stick to the read_csv stuff. Advanced: Importing every data format under the sun you say? I want to know how to do that. Here’s Part 1, as well as Part 2, which focuses on databases and HTTP requests. Go nuts. 2.2.3 R Markdown R Markdown is how you will be submitting assignments for this course. In general, it is a great way to communicate your findings to others. Don’t know about R Markdown? DataCamp course to the rescue! We will be using html formatting so focus on that. There is also an RStudio webinar about it. More Advanced: The R Markdown page from RStudio has lessons with extensive info. Also, more cheatsheets. 2.3 Help Me, R Community! There are a bunch of people using the same tools you are. Your fellow classmates are a good place to start! Post questions to Piazza to see how they could help. More Advanced: There is a vibrant RStudio Community page. Also, R likes twitter. Check out #rstats or maybe let Hadley Wickham know about a wonky error message. "],
["iris.html", "3 Walkthrough: Iris Example 3.1 Quick Note on Doing it the Lazy Way 3.2 Viewing Data 3.3 Plotting data 3.4 Markdown Etiquette 3.5 Overlapping Data 3.6 Formatting for presentation 3.7 Alter Appearance 3.8 Consider Themes 3.9 Going Deeper 3.10 Helpful links", " 3 Walkthrough: Iris Example This example goes through some work with the iris dataset to get to a finished scatterplot that is ready to present. Includes info about viewing data, plotting with ggplot, markdown, and more. Here’s what we end up with: 3.1 Quick Note on Doing it the Lazy Way Shortcuts are your best friend to get work done faster. And they are easy to find. In the toolbar: Tools &gt; Keyboard Shortcuts Help OR ⌥⇧K Some good ones: Insert assignment operator (&lt;-): Alt/Option+- Insert pipe (%&gt;%): Ctrl/Cmd+Shift+M Comment Code: Ctrl/Cmd+Shift+C Run current line/selection: Ctrl/Cmd+Enter Re-run previous region: Ctrl/Cmd+Shift+P Be on the lookout for things you do often and try to see if there is a faster way to do them. Additionally, the RStudio IDE can be a little daunting, but it is full of useful tools that you can read about in this cheatsheet or go through with this DataCamp course: Part 1, Part 2. Okay, now let’s get to it… 3.2 Viewing Data Let’s start with loading the package so we can get the data as a dataframe. library(datasets) class(iris) ## [1] &quot;data.frame&quot; This is not a huge dataset, but it is helpful to get into the habit of treating datasets as large no matter what. Because of this, make sure you inspect the size and structure of your dataset before going and printing it to the console. Here we can see that we have 150 observations across 5 different variables. dim(iris) ## [1] 150 5 There are a bunch of ways to get information on your dataset. Here are a few: str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## # This one requires dplyr, but it&#39;s worth it :) library(dplyr) glimpse(iris) ## Observations: 150 ## Variables: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9,... ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1,... ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5,... ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1,... ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, s... Plotting the data by calling iris to the console will print the whole thing. Go ahead and try it in this case, but this is not recommended for larger datasets. Instead, use head() in the console or View(). If you want to learn more about these commands, or anything for that matter, just type ?&lt;command&gt; into the console. ?head, for example, will reveal that there is an additional argument to head called n for the number of lines printed, which defaults to 6. Also, you may notice there is something called tail. I wonder what that does? :) 3.3 Plotting data Let’s plot something! # Something&#39;s missing library(ggplot2) ggplot(iris) Where is it? Maybe if we add some aesthetics. I remember that was an important word that came up somewhere: # Still not working... ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) Still nothing. Remember, you have to add a geom for something to show up. # There we go! ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() Yay! Something showed up! Notice where we put the data, inside of ggplot(). ggplot is built on layers. Here we put it in the main call to ggplot. The data argument is also available in geom_point(), but in that case it would only apply to that layer. Here, we are saying, for all layers, unless specified, make the data be iris. Now let’s add a color mapping by Species: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species)) Usually it is helpful to store the main portion of the plot in a variable and add on the layers. The code below achieves the same output as above: sepal_plot &lt;- ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) sepal_plot + geom_point(aes(color = Species)) 3.4 Markdown Etiquette Working with markdown and chunks can get out of hand, but there are some helpful tricks. First, consider naming your chunks as you go. If you combine this with headers, your work will be much more organized. Specifically, the little line at the bottom of the editor becomes much more useful. From this: To this: Just add a name to the start of each chunk: {r &lt;cool-code-chunk-name&gt;, &lt;chunk_option&gt; = TRUE} Now you can see what the chunks were about as well as get a sense of where you are in the document. Just don’t forget, it is a space after the r and commas for the other chunk options like eval or echo. 3.5 Overlapping Data Eagle-eyed viewers may notice that we seem to be a few points short. We should be seeing 150 points, but we only see 117 (yes, I counted). Where are those missing points? They are actually hiding behind other points. This dataset rounds to the nearest tenth of a centimeter, which is what is giving us those regular placings of the points. How did I know the data was in centimeters? ?iris of course! Ah, you ask a silly question, you get a silly answer. # This plot hides some of the points ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species)) What’s the culprit? The color aesthetic. The color by default is opaque and will hide any points that are behind it. As a rule, it is always beneficial to reduce the opacity a little no matter what to avoid this problem. To do this, change the alpha value to something other than it’s default 1, like 0.5. ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species, alpha = 0.5)) Okay…a couple things with this. 3.5.1 First: The Legend First, did you notice the new addition to the legend? That looks silly! Why did that show up? Well, when we added the alpha into aes(), we got a new legend. Let’s look at what we are doing with geom_point(). Specifically, this is saying how we should map the color and alpha: geom_point(mapping = aes(color = Species, alpha = 0.5)) So, we are mapping these given aesthetics, color and alpha, to certain values. ggplot knows that usually the aesthetic mapping will vary since you are probably passing in data that varies, so it will create a legend for each mapping. However, we don’t need a legend for the alpha: we explicitly set it to be 0.5. To fix this, we can pull alpha out of aes and instead treat it like an attribute: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), alpha = 0.5) No more legend. So, in ggplot, there is a difference between where an aesthetic is placed. It is also called MAPPING an aesthetic (making it vary with data inside aes) or SETTING an aesthetic (make it a constant attribute across all datapoints outside of aes). 3.5.2 Second: Jittering Secondly, did this alpha trick really help us? Are we able to see anything in the plot in an easier way? Not really. Since the points perfectly overlap, the opacity difference doesn’t help us much. Usually, opacity will work, but here the data is so regular that we don’t gain anything in the perception department. We can fix this by introducing some jitter to the datapoints. Jitter adds a little random noise and moves the datapoints so that they don’t fully overlap: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), alpha = 0.5, position = &quot;jitter&quot;) Consider your motives when using jittering. You are by definition altering the data, but it may be beneficial in some situations. Aside Here’s a quick example where opacity using alpha might be more directly helpful. # lib for arranging plots side by side library(gridExtra) # make some normally distributed data x_points &lt;- rnorm(n = 10000, mean = 0, sd = 2) y_points &lt;- rnorm(n = 10000, mean = 6, sd = 2) df &lt;- data.frame(x_points, y_points) # plot with/without changed alpha plt1 &lt;- ggplot(df, aes(x_points, y_points)) + geom_point() + ggtitle(&quot;Before (alpha = 1)&quot;) plt2 &lt;- ggplot(df, aes(x_points, y_points)) + geom_point(alpha = 0.1) + ggtitle(&quot;After (alpha = 0.1)&quot;) # arrange plots gridExtra::grid.arrange(plt1, plt2, ncol = 2, nrow = 1) Here it is much easier to see where the dataset is concentrated. 3.6 Formatting for presentation Let’s say we have finished this plot and we are ready to present it to other people: We should clean it up a bit so it can stand on its own. 3.7 Alter Appearance First, let’s make the x/y labels a little cleaner and more descriptive: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), alpha = 0.5, position = &quot;jitter&quot;) + xlab(&quot;Sepal Length (cm)&quot;) + ylab(&quot;Sepal Width (cm)&quot;) Next, add a title that encapsulates the plot: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), alpha = 0.5, position = &quot;jitter&quot;) + xlab(&quot;Sepal Length (cm)&quot;) + ylab(&quot;Sepal Width (cm)&quot;) + ggtitle(&quot;Sepal Dimensions in Different Species of Iris Flowers&quot;) And make the points a little bigger: ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), size = 3, alpha = 0.5, position = &quot;jitter&quot;) + xlab(&quot;Sepal Length (cm)&quot;) + ylab(&quot;Sepal Width (cm)&quot;) + ggtitle(&quot;Sepal Dimensions in Different Species of Iris Flowers&quot;) Now it’s looking presentable. 3.8 Consider Themes It may be better for your situation to change the theme of the plot (the background, axes, etc.; the “accessories” of the plot). Explore what different themes can offer and pick one that is right for you. base_plot &lt;- ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species), size = 3, alpha = 0.5, position = &quot;jitter&quot;) + xlab(&quot;Sepal Length (cm)&quot;) + ylab(&quot;Sepal Width (cm)&quot;) + ggtitle(&quot;Sepal Dimensions in Different Species of Iris Flowers&quot;) base_plot base_plot + theme_light() base_plot + theme_minimal() base_plot + theme_classic() base_plot + theme_void() I’m going to go with theme_minimal() this time. So here we are! We got a lovely scatterplot ready to show the world! 3.9 Going Deeper We have just touched the surface of ggplot and dipped our toes into grammar of graphics. If you want to go deeper, I highly recommend the DataCamp (DataCamp 2018) courses on Data Visualization with ggplot2 with Rick Scavetta. There are three parts and they are quite dense, but the first part is definitely worth checking out. 3.10 Helpful links RStudio ggplot2 Cheat Sheet DataCamp: Mapping aesthetics to things in ggplot R Markdown Reference Guide R for Data Science References "],
["resources.html", "4 External Resources 4.1 Books 4.2 Cheatsheets", " 4 External Resources This is a long list of helpful external resources, from books to URLs to exercises, etc. 4.1 Books A lot of these are available for students through Columbia Libraries, in both physical and e-book formats. 4.1.1 Graphical Data Analysis with R This book (Unwin 2015) systematically goes through the different types of data, including categorical variables, continuous variables, and time series. The author shows different examples of plotting techniques using ggplot and promoting the “grammar of graphics” model. Code snippets included and available at the book’s website. 4.1.2 R for Data Science The classic. Everything from data types, programming, modeling, communicating, and those keyboard shortcuts you keep forgetting. To quote the book, “this book will teach you how to do data science with R.” (Garrett Grolemund 2017) Nuff said. 4.2 Cheatsheets Links to other lists like this one. 4.2.1 Cheatsheet of cheatsheets Paul van der Laken (Laken 2018) has put together a large collection of R resource links, including cheat sheets, style guides, package info, blogs, and other helpful resources. 4.2.2 RStudio IDE Cheat Sheet All the info you could want on the RStudio interface. (RStudio 2018) 4.2.3 Not formatted RStudio cheat sheet collection https://www.rstudio.com/resources/cheatsheets/ Markdown basics https://rmarkdown.rstudio.com/authoring_basics.html When you knit code, there are helpful options for suppressing warnings, plots, etc. https://yihui.name/knitr/options/ "]
]
