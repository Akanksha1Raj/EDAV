[
<<<<<<< HEAD
["intro.html", "1 Introduction 1.1 Everything you need for EDAV 1.2 What the Banners Mean 1.3 Help Improve edav.info/ 1.4 Fun Stuff: T-Shirts", " 1 Introduction 1.1 Everything you need for EDAV This resource has everything you need and more to be successful with R, this EDAV course, and beyond. Let’s get started! With this resource, we try to give you a curated collection of tools and references that will make it easier to learn how to work with data in R. In addition, we include sections on basic chart types/tools so you can learn by doing. There are also several walkthroughs where we work with data and discuss problems as well as some tips/tricks that will help you. We hope this resource serves you well! 1.2 What the Banners Mean The banners at the top of each page are an effort to improve your ability to navigate this resource. Each one is color-coded based on its content and has a unique icon to improve recall. There are four types: 1.2.1 Blue Pages Blue == INFO: The blue banners signal pages that contain basic information. Examples of blue pages include this introduction page and the basics page, which explains how to setup R/RStudio as well as ways to get help if you need it. Blue pages are the help desk of this resource: look to them if you are lost and need to find your way. 1.2.2 Red Pages Red == WALK: The red banners signal pages that contain more extensive walkthroughs. An example of a red page is the iris walkthrough, where a well-known dataset is presented as a pretty scatterplot and steps are shown from start to finish. This page type is the most thorough: it trys to provide full documentation, explanations of design choices, and advice on best practices. It’s like going to office hours and having a great clarifying chat with a course assistant…in article form. If you would like to see a fully-worked-through example of something with a lot of guidance along the way, check out the red pages. 1.2.3 Green Pages Green == DOC: The green banners signal pages that contain more compact documentation. An example of a green page is the histogram page, which includes simple examples of how to create histograms, when to use them, and things to be aware of/watch out for. The green pages hold your hand much less than the red pages: they explain how to use a chart/tool using examples and simple terms. If you have an idea in mind and are just wondering how to execute it, the green pages will help fill in those gaps. 1.2.4 Yellow Pages Yellow == REF: The yellow banners signal pages that contain simple collections of references. An example of a yellow page is the external resources page, which is a list of materials that you can look through and learn from. Yellow pages have the least amount of hand-holding: they are collections of resources and references that will help you learn about new things. 1.3 Help Improve edav.info/ Not finding what you are looking for? Think a section could be made clearer? Consider helping improve edav.info/ by submitting a pull request to the github page. Don’t understand that last sentence? We have a page on how you can contribute to edav.info/. 1.4 Fun Stuff: T-Shirts Zach Bogart has made a few t-shirts available on Teespring so you can show your love for EDAV and R. Hope you enjoy. P.S. Designing a cool shirt or sticker is a great addition to your community contribution. It has to be cool, though :) "]
=======
["contribute.html", "3 Contribute to this resource 3.1 Overview 3.2 Why Contribute? 3.3 Ways You Can Contribute 3.4 Resources", " 3 Contribute to this resource 3.1 Overview This page explains how to contribute to edav.info/. 3.2 Why Contribute? We don’t want edav.info/ to be just another resource. Rather, we want it to be your resource. If there are things that trip you up or cause you frustration, chances are you’re not alone. Everyone comes to this course with different backgrounds and expertise. Being able to collect all that knowledge in one place is this resource’s mission and you can help move that mission forward. 3.3 Ways You Can Contribute Below are some different ways you can contribute to edav.info/. We welcome all input. 3.3.1 Contribute Directly One way to contribute to edav.info/ is to contribute directly by editing a chapter. At the top of every page of this resource, you will see an icon that looks like this: . Clicking it will open a new tab where you can edit the markdown for that page on our GitHub repo and submit your change as a pull request. Essentially, you will create a copy of our repo, make your desired changes, and suggest to us that we include them. If we approve of your changes, they will be rendered and published to the site. Contributing directly works best if the change you are proposing is something relatively small, such as: A typo/grammatical error An unclear phrasing/explanation A quick code fix 3.3.1.1 Direct Contribution Walkthrough This is a full walkthough example of proposing a change to edav.info/. It’s a little long, but don’t get scared; it’s a great way to learn about GitHub and it’s almost entirely hitting big green buttons! Let’s find something to change. For example, I’m pretty sure they meant to write “repository” here. Oops. Let’s fix it for them! That’s not how you spell “repository”! Let’s fix it. To make the fix, we click on the edit icon, , at the top of the page. This will take us to their GitHub repo, where all the code for this resource is stored. Note: You need to have a valid GitHub account to contribute. In this example, we are using a dummy account called excited-student so if you see it in a screenshot, know that it would be replaced by your own username. Hit this icon to go to GitHub. We haven’t forked the repo yet, so GitHub shows us a page like the one below. No worries! We just hit the big green button labeled Fork this repository and propose changes and we’ll be good to go (as you will see, big green buttons are our friends). For more info on forking repos, the GitHub Guide on Forking Projects is very informative. Haven’t forked the repo before? No worries; the big green button will solve everything. Now that we have successfully forked the repo, we can see the code for the page we want to edit. Note: That little blue blurb at the top is spelling out what is happening/going to happen: we have made a copy of a repo because we don’t have write access to it . So, after we make our change on this page, we will inform the owners of the repo about our edits by using a pull request. GitHub can be super overwhelming, but it will try its darndest to inform you what will happen along the way. Ready to edit the code. The blue blurb is worth reading. Let’s fix that embarrassing typo! We update the code right in this editor, include an explanation for what we changed/why we made the change, and then hit the big green button labeled Propose file change. Gotta love those big green buttons! Make your edits, include a quick explanation, and hit the big green button. Now GitHub is once again helping out by letting us review the changes we made. On this page we can review our proposed changes by scrolling down and looking at the diffs. Our fix is very simple so there isn’t much to see. Once again, we are going to push the big green button, this time labeled Create pull request. This will start the process of letting the edav.info/ people know that we would like them to include our changes (in git-speak, we are requesting that when the edav.info/ people do a git pull, they pull in our changes as well. Hence, a pull request). Chance to review your changes. Once satisfied, hit the big green button to start a pull request. Here we are at the pull request page. Notice the green checkmark that says “Able to merge” (a good sign that everything is going smoothly). Now we explain our pull request with some comments and, once again, hit the big green button labeled Create pull request. Note: You may be asking, “Why do I have to type this explanation in again?”. This is because the explanation we wrote in Step 5 (where we edited the file) is a commit. We could have had multiple commits at once that we wanted to bundle into one pull request. This step is a way to explain the pull request as a whole. It is redundant for us because our change is so small and only has one commit. Still totally lost? This GitHub Guide on Understanding the GitHub Flow is an incredibly helpful read and our GitHub Resources page also has a lot of helpful links. Explain your pull request and hit the big green button. Congratulations are in order! We have successfully opened a pull request on a GitHub repo! Now one of the repo owners (like the guy writing this tutorial, for example ) has to decide if they want to include your pull request or not. In this case they’ll certainly approve it, but know that they may decide against adding your changes. For more info, read the section of the Open Source Guides on what happens after you submit a contribution. Note: Be aware that the icon shown below may initially be yellow to signal that some tests are being performed to check the conflicts of your proposal with the original repo. It should turn green if everything passes. We did it! Now the maintainers will review our changes and get back to us… And now we wait… via GIPHY What’s this!? We have received an email from one of the repo owners, Zach Bogart. And it says that they merged the change! Huzzah! We click on the number to take us back to the pull request we opened. We got an email! And it says they merged! Click that number to see the updated pull request. Here we are at the updated pull request page. Notice that everything has turned purple. Purple is the best color to see on GitHub; it’s the color of victory. It signals that our pull request was merged with the repo, meaning our change has become part of the repo! Also, notice the button that says Delete branch. Since all the work on our branch was merged with the repo, it has served its purpose and can be deleted safely. Everything is purple! Woot! Can safely delete our branch Now if we go back to the main page of the repo, we can see our merge was the most recent addition. And, if we scroll down, we will see that github_resources.Rmd, the file we edited, has been updated recently and it shows our commit message “fix typo”. We did it! Let’s check out the site to see our change published for the whole internet to see! Look! There’s our merged pull request added to the repo! And the edits we made to github_resources.Rmd! There it is! We go back to the page we edited and now our typo has been included!Note: The changes will take about four to five minutes to appear on the site after notification of a successful merge. This is because we use Travis CI on the backend of our repo and it takes a little time for it to re-render the site pages. If you want to learn more about how you can use Travis CI to auto-magically generate your work, checkout our section on adding Travis to a GitHub bookdown book in the Publishing with R page. Look at that! It’s published! So many exclamation points!!! We contributed to a GitHub repo! Hooray! Time to celebrate! via GIPHY If what you want to improve is a little more substantial (too difficult to contribute directly), read on. 3.3.2 Submit An Issue If your proposed change is more complex, consider letting us know by submitting an issue. Say some links are broken, or a graph example is inaccurate or misleading. It may be a little too complicated to contribute directly. What to do? Submit an issue, of course! Issues are tasks you can post to a GitHub repo that people can then take on and fix. They can be small (“this link is broken” / “add this resource”) or complex (“I would love to have a chapter on…” / “reformat this code chunk in this way”). Once posted, issues can be taken on by anyone. You do not have to know how to code up your issue; from fixing a bug to proposing a resource we should link to, we appreciate any feedback you have and will take it all into consideration. How to Submit Issues: Go to our GitHub repo and click on the Issues Tab Click on “New Issue” Propose your Issue and click “Submit new issue” That’s it! We appreciate your input and will take your issue into account in improving edav.info/ :) Notes about submitting issues: Make sure your changes are not already an open issue (so as not to have redundant issues) Please thoroughly explain your proposed change when posting a new issue Consider using labels to specify the kind of issue, such as “bug”, “enhancement”, “help wanted”, “question”, or create your own. For more info, please consider reading the Open Source Guide on how to contribute. 3.3.3 Solve an Open Issue If you see an open issue that you think you can solve, by all means go for it! Simply fork our repo, add to the code base, and submit your work as a pull request. We appreciate any input you may have. For more info, please consider reading the GitHub Guide on Forking Projects and the Open Source Guide on how to contribute. 3.4 Resources Our GitHub repo: Link to the GitHub repository for edav.info/ Open Source Guide: Fantastic guide on how to contribute to projects like this one Our Page of GitHub Resources: Confused about the GitHub basics? Checkout our page of resources (once you learn more about git, you’ll realize that was a joke). "]
>>>>>>> c311e5458deaa06816777314bdeeb0980ac153b9
]
